From 2c71e43b52de0aa79b9c05585b76cb4bb0920aeb Mon Sep 17 00:00:00 2001
From: "pengchao.hu" <pengchao.hu@sophgo.com>
Date: Mon, 15 May 2023 11:06:11 +0800
Subject: [PATCH] adjust for tpu-mlir

---
 mlir/CMakeLists.txt                           |   4 +-
 mlir/include/mlir/CMakeLists.txt              |   4 +-
 mlir/include/mlir/Dialect/CMakeLists.txt      |  31 -
 mlir/include/mlir/Dialect/Func/IR/FuncOps.td  |   4 +-
 mlir/include/mlir/Dialect/Tosa/CMakeLists.txt |   2 +-
 .../mlir/Dialect/Tosa/IR/TosaOpBase.td        |   2 -
 mlir/include/mlir/InitAllDialects.h           | 127 +---
 mlir/include/mlir/InitAllPasses.h             |  59 +-
 .../Bindings/Python/RegisterEverything.cpp    |  10 +-
 mlir/lib/CAPI/CMakeLists.txt                  |   2 +-
 mlir/lib/CAPI/Dialect/CMakeLists.txt          | 126 ----
 .../CAPI/RegisterEverything/CMakeLists.txt    |  14 +-
 .../RegisterEverything/RegisterEverything.cpp |   5 -
 mlir/lib/CMakeLists.txt                       |   6 +-
 mlir/lib/Dialect/CMakeLists.txt               |  32 +-
 mlir/lib/Dialect/Func/CMakeLists.txt          |   2 +-
 mlir/lib/Dialect/Func/IR/CMakeLists.txt       |   2 -
 mlir/lib/Dialect/Func/IR/FuncOps.cpp          |   9 -
 mlir/lib/Dialect/Tosa/CMakeLists.txt          |   5 +-
 .../Dialect/Tosa/IR/TosaCanonicalizations.cpp |  53 +-
 mlir/lib/Dialect/Tosa/IR/TosaOps.cpp          |   1 -
 mlir/lib/IR/Verifier.cpp                      |   8 +-
 mlir/lib/Rewrite/CMakeLists.txt               |   2 +-
 mlir/lib/Rewrite/FrozenRewritePatternSet.cpp  |   7 +-
 mlir/lib/Tools/CMakeLists.txt                 |   7 -
 mlir/python/CMakeLists.txt                    | 640 +++++++++---------
 mlir/python/mlir/ir.py                        |  20 +
 mlir/tools/CMakeLists.txt                     |  18 +-
 mlir/tools/mlir-opt/CMakeLists.txt            |   1 -
 mlir/tools/mlir-opt/mlir-opt.cpp              |   3 +-
 30 files changed, 387 insertions(+), 819 deletions(-)

diff --git a/mlir/CMakeLists.txt b/mlir/CMakeLists.txt
index d91d1b105da4..5af7f05767c1 100644
--- a/mlir/CMakeLists.txt
+++ b/mlir/CMakeLists.txt
@@ -161,8 +161,8 @@ include_directories( ${MLIR_INCLUDE_DIR})
 # MLIR_TABLEGEN_EXE in PARENT_SCOPE which gets lost if that folder is included
 # from another directory like tools
 add_subdirectory(tools/mlir-tblgen)
-add_subdirectory(tools/mlir-linalg-ods-gen)
-add_subdirectory(tools/mlir-pdll)
+# add_subdirectory(tools/mlir-linalg-ods-gen)
+# add_subdirectory(tools/mlir-pdll)
 
 set(MLIR_TABLEGEN_EXE "${MLIR_TABLEGEN_EXE}" CACHE INTERNAL "")
 set(MLIR_TABLEGEN_TARGET "${MLIR_TABLEGEN_TARGET}" CACHE INTERNAL "")
diff --git a/mlir/include/mlir/CMakeLists.txt b/mlir/include/mlir/CMakeLists.txt
index 1e31d7c29e1e..e166510d2512 100644
--- a/mlir/include/mlir/CMakeLists.txt
+++ b/mlir/include/mlir/CMakeLists.txt
@@ -1,6 +1,6 @@
-add_subdirectory(Conversion)
+# add_subdirectory(Conversion)
 add_subdirectory(Dialect)
 add_subdirectory(IR)
 add_subdirectory(Interfaces)
-add_subdirectory(Reducer)
+# add_subdirectory(Reducer)
 add_subdirectory(Transforms)
diff --git a/mlir/include/mlir/Dialect/CMakeLists.txt b/mlir/include/mlir/Dialect/CMakeLists.txt
index 58cc690d9a78..e974b4b9aea3 100644
--- a/mlir/include/mlir/Dialect/CMakeLists.txt
+++ b/mlir/include/mlir/Dialect/CMakeLists.txt
@@ -1,37 +1,6 @@
-add_subdirectory(AMDGPU)
-add_subdirectory(AMX)
-add_subdirectory(Affine)
-add_subdirectory(Arith)
-add_subdirectory(ArmNeon)
-add_subdirectory(ArmSVE)
-add_subdirectory(Async)
-add_subdirectory(Bufferization)
-add_subdirectory(Complex)
-add_subdirectory(ControlFlow)
-add_subdirectory(DLTI)
-add_subdirectory(EmitC)
 add_subdirectory(Func)
-add_subdirectory(GPU)
-add_subdirectory(Index)
 add_subdirectory(IRDL)
-add_subdirectory(LLVMIR)
-add_subdirectory(Linalg)
-add_subdirectory(MLProgram)
-add_subdirectory(Math)
-add_subdirectory(MemRef)
-add_subdirectory(NVGPU)
-add_subdirectory(OpenACC)
-add_subdirectory(OpenMP)
 add_subdirectory(PDL)
 add_subdirectory(PDLInterp)
 add_subdirectory(Quant)
-add_subdirectory(SCF)
-add_subdirectory(SPIRV)
-add_subdirectory(Shape)
-add_subdirectory(SparseTensor)
-add_subdirectory(Tensor)
 add_subdirectory(Tosa)
-add_subdirectory(Transform)
-add_subdirectory(Utils)
-add_subdirectory(Vector)
-add_subdirectory(X86Vector)
diff --git a/mlir/include/mlir/Dialect/Func/IR/FuncOps.td b/mlir/include/mlir/Dialect/Func/IR/FuncOps.td
index 69dc8d32c3c6..19180e767cda 100644
--- a/mlir/include/mlir/Dialect/Func/IR/FuncOps.td
+++ b/mlir/include/mlir/Dialect/Func/IR/FuncOps.td
@@ -13,7 +13,6 @@ include "mlir/IR/EnumAttr.td"
 include "mlir/IR/OpAsmInterface.td"
 include "mlir/IR/SymbolInterfaces.td"
 include "mlir/Interfaces/CallInterfaces.td"
-include "mlir/Interfaces/ControlFlowInterfaces.td"
 include "mlir/IR/FunctionInterfaces.td"
 include "mlir/Interfaces/InferTypeOpInterface.td"
 include "mlir/Interfaces/SideEffectInterfaces.td"
@@ -21,7 +20,6 @@ include "mlir/Interfaces/SideEffectInterfaces.td"
 def Func_Dialect : Dialect {
   let name = "func";
   let cppNamespace = "::mlir::func";
-  let dependentDialects = ["cf::ControlFlowDialect"];
   let hasConstantMaterializer = 1;
   let usePropertiesForAttributes = 1;
 }
@@ -353,7 +351,7 @@ def FuncOp : Func_Op<"func", [
 //===----------------------------------------------------------------------===//
 
 def ReturnOp : Func_Op<"return", [Pure, HasParent<"FuncOp">,
-                                MemRefsNormalizable, ReturnLike, Terminator]> {
+                                MemRefsNormalizable, Terminator]> {
   let summary = "Function return operation";
   let description = [{
     The `func.return` operation represents a return operation within a function.
diff --git a/mlir/include/mlir/Dialect/Tosa/CMakeLists.txt b/mlir/include/mlir/Dialect/Tosa/CMakeLists.txt
index 9f57627c321f..218c20c8819f 100644
--- a/mlir/include/mlir/Dialect/Tosa/CMakeLists.txt
+++ b/mlir/include/mlir/Dialect/Tosa/CMakeLists.txt
@@ -1,2 +1,2 @@
 add_subdirectory(IR)
-add_subdirectory(Transforms)
+#add_subdirectory(Transforms)
diff --git a/mlir/include/mlir/Dialect/Tosa/IR/TosaOpBase.td b/mlir/include/mlir/Dialect/Tosa/IR/TosaOpBase.td
index 5d25f8d0a404..06e12085e584 100644
--- a/mlir/include/mlir/Dialect/Tosa/IR/TosaOpBase.td
+++ b/mlir/include/mlir/Dialect/Tosa/IR/TosaOpBase.td
@@ -40,8 +40,6 @@ def Tosa_Dialect : Dialect {
     there will be tools to lower from the ML frameworks into TOSA.
   }];
 
-  let dependentDialects = ["tensor::TensorDialect"];
-
   let cppNamespace = "mlir::tosa";
   let hasConstantMaterializer = 1;
   let useDefaultAttributePrinterParser = 1;
diff --git a/mlir/include/mlir/InitAllDialects.h b/mlir/include/mlir/InitAllDialects.h
index e0f154824d8e..b39ea292dd0b 100644
--- a/mlir/include/mlir/InitAllDialects.h
+++ b/mlir/include/mlir/InitAllDialects.h
@@ -14,71 +14,12 @@
 #ifndef MLIR_INITALLDIALECTS_H_
 #define MLIR_INITALLDIALECTS_H_
 
-#include "mlir/Dialect/AMDGPU/IR/AMDGPUDialect.h"
-#include "mlir/Dialect/AMX/AMXDialect.h"
-#include "mlir/Dialect/Affine/IR/AffineOps.h"
-#include "mlir/Dialect/Affine/IR/ValueBoundsOpInterfaceImpl.h"
-#include "mlir/Dialect/Affine/TransformOps/AffineTransformOps.h"
-#include "mlir/Dialect/Arith/IR/Arith.h"
-#include "mlir/Dialect/Arith/IR/ValueBoundsOpInterfaceImpl.h"
-#include "mlir/Dialect/Arith/Transforms/BufferizableOpInterfaceImpl.h"
-#include "mlir/Dialect/ArmNeon/ArmNeonDialect.h"
-#include "mlir/Dialect/ArmSVE/ArmSVEDialect.h"
-#include "mlir/Dialect/Async/IR/Async.h"
-#include "mlir/Dialect/Bufferization/IR/Bufferization.h"
-#include "mlir/Dialect/Bufferization/TransformOps/BufferizationTransformOps.h"
-#include "mlir/Dialect/Bufferization/Transforms/FuncBufferizableOpInterfaceImpl.h"
-#include "mlir/Dialect/Complex/IR/Complex.h"
-#include "mlir/Dialect/ControlFlow/IR/ControlFlow.h"
-#include "mlir/Dialect/DLTI/DLTI.h"
-#include "mlir/Dialect/EmitC/IR/EmitC.h"
 #include "mlir/Dialect/Func/IR/FuncOps.h"
-#include "mlir/Dialect/GPU/IR/GPUDialect.h"
-#include "mlir/Dialect/GPU/TransformOps/GPUTransformOps.h"
 #include "mlir/Dialect/IRDL/IR/IRDL.h"
-#include "mlir/Dialect/Index/IR/IndexDialect.h"
-#include "mlir/Dialect/LLVMIR/LLVMDialect.h"
-#include "mlir/Dialect/LLVMIR/NVVMDialect.h"
-#include "mlir/Dialect/LLVMIR/ROCDLDialect.h"
-#include "mlir/Dialect/Linalg/IR/Linalg.h"
-#include "mlir/Dialect/Linalg/IR/ValueBoundsOpInterfaceImpl.h"
-#include "mlir/Dialect/Linalg/TransformOps/DialectExtension.h"
-#include "mlir/Dialect/Linalg/Transforms/BufferizableOpInterfaceImpl.h"
-#include "mlir/Dialect/Linalg/Transforms/TilingInterfaceImpl.h"
-#include "mlir/Dialect/MLProgram/IR/MLProgram.h"
-#include "mlir/Dialect/Math/IR/Math.h"
-#include "mlir/Dialect/MemRef/IR/MemRef.h"
-#include "mlir/Dialect/MemRef/IR/ValueBoundsOpInterfaceImpl.h"
-#include "mlir/Dialect/MemRef/TransformOps/MemRefTransformOps.h"
-#include "mlir/Dialect/MemRef/Transforms/BufferizableOpInterfaceImpl.h"
-#include "mlir/Dialect/MemRef/Transforms/RuntimeOpVerification.h"
-#include "mlir/Dialect/NVGPU/IR/NVGPUDialect.h"
-#include "mlir/Dialect/OpenACC/OpenACC.h"
-#include "mlir/Dialect/OpenMP/OpenMPDialect.h"
 #include "mlir/Dialect/PDL/IR/PDL.h"
 #include "mlir/Dialect/PDLInterp/IR/PDLInterp.h"
 #include "mlir/Dialect/Quant/QuantOps.h"
-#include "mlir/Dialect/SCF/IR/SCF.h"
-#include "mlir/Dialect/SCF/IR/ValueBoundsOpInterfaceImpl.h"
-#include "mlir/Dialect/SCF/TransformOps/SCFTransformOps.h"
-#include "mlir/Dialect/SCF/Transforms/BufferizableOpInterfaceImpl.h"
-#include "mlir/Dialect/SPIRV/IR/SPIRVDialect.h"
-#include "mlir/Dialect/Shape/IR/Shape.h"
-#include "mlir/Dialect/Shape/Transforms/BufferizableOpInterfaceImpl.h"
-#include "mlir/Dialect/SparseTensor/IR/SparseTensor.h"
-#include "mlir/Dialect/SparseTensor/Transforms/BufferizableOpInterfaceImpl.h"
-#include "mlir/Dialect/Tensor/IR/Tensor.h"
-#include "mlir/Dialect/Tensor/IR/TensorInferTypeOpInterfaceImpl.h"
-#include "mlir/Dialect/Tensor/IR/TensorTilingInterfaceImpl.h"
-#include "mlir/Dialect/Tensor/IR/ValueBoundsOpInterfaceImpl.h"
-#include "mlir/Dialect/Tensor/TransformOps/TensorTransformOps.h"
-#include "mlir/Dialect/Tensor/Transforms/BufferizableOpInterfaceImpl.h"
 #include "mlir/Dialect/Tosa/IR/TosaOps.h"
-#include "mlir/Dialect/Transform/IR/TransformDialect.h"
-#include "mlir/Dialect/Vector/IR/VectorOps.h"
-#include "mlir/Dialect/Vector/TransformOps/VectorTransformOps.h"
-#include "mlir/Dialect/Vector/Transforms/BufferizableOpInterfaceImpl.h"
-#include "mlir/Dialect/X86Vector/X86VectorDialect.h"
 #include "mlir/IR/Dialect.h"
 
 namespace mlir {
@@ -86,77 +27,13 @@ namespace mlir {
 /// Add all the MLIR dialects to the provided registry.
 inline void registerAllDialects(DialectRegistry &registry) {
   // clang-format off
-  registry.insert<acc::OpenACCDialect,
-                  affine::AffineDialect,
-                  arith::ArithDialect,
-                  amdgpu::AMDGPUDialect,
-                  amx::AMXDialect,
-                  arm_neon::ArmNeonDialect,
-                  async::AsyncDialect,
-                  bufferization::BufferizationDialect,
-                  cf::ControlFlowDialect,
-                  complex::ComplexDialect,
-                  DLTIDialect,
-                  emitc::EmitCDialect,
-                  func::FuncDialect,
-                  gpu::GPUDialect,
-                  index::IndexDialect,
+  registry.insert<func::FuncDialect,
                   irdl::IRDLDialect,
-                  LLVM::LLVMDialect,
-                  linalg::LinalgDialect,
-                  math::MathDialect,
-                  memref::MemRefDialect,
-                  ml_program::MLProgramDialect,
-                  nvgpu::NVGPUDialect,
-                  scf::SCFDialect,
-                  omp::OpenMPDialect,
                   pdl::PDLDialect,
                   pdl_interp::PDLInterpDialect,
                   quant::QuantizationDialect,
-                  spirv::SPIRVDialect,
-                  arm_sve::ArmSVEDialect,
-                  vector::VectorDialect,
-                  NVVM::NVVMDialect,
-                  ROCDL::ROCDLDialect,
-                  shape::ShapeDialect,
-                  sparse_tensor::SparseTensorDialect,
-                  tensor::TensorDialect,
-                  transform::TransformDialect,
-                  tosa::TosaDialect,
-                  x86vector::X86VectorDialect>();
+                  tosa::TosaDialect>();
   // clang-format on
-
-  // Register all dialect extensions.
-  affine::registerTransformDialectExtension(registry);
-  bufferization::registerTransformDialectExtension(registry);
-  gpu::registerTransformDialectExtension(registry);
-  linalg::registerTransformDialectExtension(registry);
-  memref::registerTransformDialectExtension(registry);
-  scf::registerTransformDialectExtension(registry);
-  tensor::registerTransformDialectExtension(registry);
-  vector::registerTransformDialectExtension(registry);
-
-  // Register all external models.
-  affine::registerValueBoundsOpInterfaceExternalModels(registry);
-  arith::registerBufferizableOpInterfaceExternalModels(registry);
-  arith::registerValueBoundsOpInterfaceExternalModels(registry);
-  bufferization::func_ext::registerBufferizableOpInterfaceExternalModels(
-      registry);
-  linalg::registerBufferizableOpInterfaceExternalModels(registry);
-  linalg::registerTilingInterfaceExternalModels(registry);
-  linalg::registerValueBoundsOpInterfaceExternalModels(registry);
-  memref::registerBufferizableOpInterfaceExternalModels(registry);
-  memref::registerRuntimeVerifiableOpInterfaceExternalModels(registry);
-  memref::registerValueBoundsOpInterfaceExternalModels(registry);
-  scf::registerBufferizableOpInterfaceExternalModels(registry);
-  scf::registerValueBoundsOpInterfaceExternalModels(registry);
-  shape::registerBufferizableOpInterfaceExternalModels(registry);
-  sparse_tensor::registerBufferizableOpInterfaceExternalModels(registry);
-  tensor::registerBufferizableOpInterfaceExternalModels(registry);
-  tensor::registerInferTypeOpInterfaceExternalModels(registry);
-  tensor::registerTilingInterfaceExternalModels(registry);
-  tensor::registerValueBoundsOpInterfaceExternalModels(registry);
-  vector::registerBufferizableOpInterfaceExternalModels(registry);
 }
 
 /// Append all the MLIR dialects to the registry contained in the given context.
diff --git a/mlir/include/mlir/InitAllPasses.h b/mlir/include/mlir/InitAllPasses.h
index a42983d7fe03..42068bd3dee1 100644
--- a/mlir/include/mlir/InitAllPasses.h
+++ b/mlir/include/mlir/InitAllPasses.h
@@ -14,31 +14,6 @@
 #ifndef MLIR_INITALLPASSES_H_
 #define MLIR_INITALLPASSES_H_
 
-#include "mlir/Conversion/Passes.h"
-#include "mlir/Dialect/AMDGPU/Transforms/Passes.h"
-#include "mlir/Dialect/Affine/Passes.h"
-#include "mlir/Dialect/Arith/Transforms/Passes.h"
-#include "mlir/Dialect/Async/Passes.h"
-#include "mlir/Dialect/Bufferization/Transforms/Passes.h"
-#include "mlir/Dialect/Func/Transforms/Passes.h"
-#include "mlir/Dialect/GPU/Transforms/Passes.h"
-#include "mlir/Dialect/LLVMIR/Transforms/Passes.h"
-#include "mlir/Dialect/Linalg/Passes.h"
-#include "mlir/Dialect/MemRef/Transforms/Passes.h"
-#include "mlir/Dialect/NVGPU/Passes.h"
-#include "mlir/Dialect/SCF/Transforms/Passes.h"
-#include "mlir/Dialect/SPIRV/Transforms/Passes.h"
-#include "mlir/Dialect/Shape/Transforms/Passes.h"
-#include "mlir/Dialect/SparseTensor/Pipelines/Passes.h"
-#include "mlir/Dialect/SparseTensor/Transforms/Passes.h"
-#include "mlir/Dialect/Tensor/Transforms/Passes.h"
-#include "mlir/Dialect/Tosa/Transforms/Passes.h"
-#include "mlir/Dialect/Transform/Transforms/Passes.h"
-#include "mlir/Dialect/Vector/Transforms/Passes.h"
-#include "mlir/Transforms/Passes.h"
-
-#include <cstdlib>
-
 namespace mlir {
 
 // This function may be called to register the MLIR passes with the
@@ -48,39 +23,7 @@ namespace mlir {
 // registry, since it would already be calling the creation routine of the
 // individual passes.
 // The global registry is interesting to interact with the command-line tools.
-inline void registerAllPasses() {
-  // General passes
-  registerTransformsPasses();
-
-  // Conversion passes
-  registerConversionPasses();
-
-  // Dialect passes
-  affine::registerAffinePasses();
-  amdgpu::registerAMDGPUPasses();
-  registerAsyncPasses();
-  arith::registerArithPasses();
-  bufferization::registerBufferizationPasses();
-  func::registerFuncPasses();
-  registerGPUPasses();
-  registerGpuSerializeToCubinPass();
-  registerGpuSerializeToHsacoPass();
-  registerLinalgPasses();
-  registerNVGPUPasses();
-  registerSparseTensorPasses();
-  LLVM::registerLLVMPasses();
-  memref::registerMemRefPasses();
-  registerSCFPasses();
-  registerShapePasses();
-  spirv::registerSPIRVPasses();
-  tensor::registerTensorPasses();
-  tosa::registerTosaOptPasses();
-  transform::registerTransformPasses();
-  vector::registerVectorPasses();
-
-  // Dialect pipelines
-  sparse_tensor::registerSparseTensorPipelines();
-}
+inline void registerAllPasses() {}
 
 } // namespace mlir
 
diff --git a/mlir/lib/Bindings/Python/RegisterEverything.cpp b/mlir/lib/Bindings/Python/RegisterEverything.cpp
index fed5c36a625b..42491db65715 100644
--- a/mlir/lib/Bindings/Python/RegisterEverything.cpp
+++ b/mlir/lib/Bindings/Python/RegisterEverything.cpp
@@ -7,8 +7,8 @@
 //===----------------------------------------------------------------------===//
 
 #include "mlir-c/RegisterEverything.h"
-#include "mlir-c/Conversion.h"
-#include "mlir-c/Transforms.h"
+// #include "mlir-c/Conversion.h"
+// #include "mlir-c/Transforms.h"
 
 #include "mlir/Bindings/Python/PybindAdaptors.h"
 
@@ -20,7 +20,7 @@ PYBIND11_MODULE(_mlirRegisterEverything, m) {
   });
 
   // Register all passes on load.
-  mlirRegisterAllPasses();
-  mlirRegisterConversionPasses();
-  mlirRegisterTransformsPasses();
+  // mlirRegisterAllPasses();
+  // mlirRegisterConversionPasses();
+  // mlirRegisterTransformsPasses();
 }
diff --git a/mlir/lib/CAPI/CMakeLists.txt b/mlir/lib/CAPI/CMakeLists.txt
index 052eff327c73..f1bfeb8a8bba 100644
--- a/mlir/lib/CAPI/CMakeLists.txt
+++ b/mlir/lib/CAPI/CMakeLists.txt
@@ -9,7 +9,7 @@ endfunction()
 
 add_subdirectory(Debug)
 add_subdirectory(Dialect)
-add_subdirectory(Conversion)
+# add_subdirectory(Conversion)
 add_subdirectory(Interfaces)
 add_subdirectory(IR)
 add_subdirectory(RegisterEverything)
diff --git a/mlir/lib/CAPI/Dialect/CMakeLists.txt b/mlir/lib/CAPI/Dialect/CMakeLists.txt
index 6c8454a79aa2..5188fd025c75 100644
--- a/mlir/lib/CAPI/Dialect/CMakeLists.txt
+++ b/mlir/lib/CAPI/Dialect/CMakeLists.txt
@@ -1,102 +1,3 @@
-add_mlir_upstream_c_api_library(MLIRCAPIAsync
-  Async.cpp
-  AsyncPasses.cpp
-
-  PARTIAL_SOURCES_INTENDED
-  DEPENDS
-  MLIRAsyncPassIncGen
-
-  LINK_LIBS PUBLIC
-  MLIRCAPIIR
-  MLIRAsyncDialect
-  MLIRAsyncTransforms
-  MLIRPass
-)
-
-add_mlir_upstream_c_api_library(MLIRCAPIControlFlow
-  ControlFlow.cpp
-
-  PARTIAL_SOURCES_INTENDED
-  LINK_LIBS PUBLIC
-  MLIRCAPIIR
-  MLIRControlFlowDialect
-)
-
-add_mlir_upstream_c_api_library(MLIRCAPIGPU
-  GPU.cpp
-  GPUPasses.cpp
-
-  PARTIAL_SOURCES_INTENDED
-  DEPENDS
-  MLIRGPUPassIncGen
-
-  LINK_LIBS PUBLIC
-  MLIRCAPIIR
-  MLIRGPUTransforms
-  MLIRPass
-)
-
-add_mlir_upstream_c_api_library(MLIRCAPILLVM
-  LLVM.cpp
-
-  PARTIAL_SOURCES_INTENDED
-  LINK_LIBS PUBLIC
-  MLIRCAPIIR
-  MLIRLLVMDialect
-)
-
-add_mlir_upstream_c_api_library(MLIRCAPILinalg
-  Linalg.cpp
-  LinalgPasses.cpp
-
-  PARTIAL_SOURCES_INTENDED
-  DEPENDS
-  MLIRLinalgPassIncGen
-
-  LINK_LIBS PUBLIC
-  MLIRCAPIIR
-  MLIRLinalgDialect
-  MLIRPass
-  MLIRLinalgTransforms
-)
-
-add_mlir_upstream_c_api_library(MLIRCAPIMLProgram
-  MLProgram.cpp
-
-  PARTIAL_SOURCES_INTENDED
-  LINK_LIBS PUBLIC
-  MLIRCAPIIR
-  MLIRMLProgramDialect
-)
-
-add_mlir_upstream_c_api_library(MLIRCAPISCF
-  SCF.cpp
-
-  PARTIAL_SOURCES_INTENDED
-  LINK_LIBS PUBLIC
-  MLIRCAPIIR
-  MLIRSCFDialect
-)
-
-add_mlir_upstream_c_api_library(MLIRCAPIShape
-  Shape.cpp
-
-  PARTIAL_SOURCES_INTENDED
-  LINK_LIBS PUBLIC
-  MLIRCAPIIR
-  MLIRShapeDialect
-)
-
-add_mlir_upstream_c_api_library(MLIRCAPISparseTensor
-  SparseTensor.cpp
-  SparseTensorPasses.cpp
-
-  PARTIAL_SOURCES_INTENDED
-  LINK_LIBS PUBLIC
-  MLIRCAPIIR
-  MLIRSparseTensorDialect
-  MLIRSparseTensorTransforms
-)
 
 add_mlir_upstream_c_api_library(MLIRCAPIFunc
   Func.cpp
@@ -107,24 +8,6 @@ add_mlir_upstream_c_api_library(MLIRCAPIFunc
   MLIRFuncDialect
 )
 
-add_mlir_upstream_c_api_library(MLIRCAPITensor
-  Tensor.cpp
-
-  PARTIAL_SOURCES_INTENDED
-  LINK_LIBS PUBLIC
-  MLIRCAPIIR
-  MLIRTensorDialect
-)
-
-add_mlir_upstream_c_api_library(MLIRCAPITransformDialect
-  Transform.cpp
-
-  PARTIAL_SOURCES_INTENDED
-  LINK_LIBS PUBLIC
-  MLIRCAPIIR
-  MLIRTransformDialect
-)
-
 add_mlir_upstream_c_api_library(MLIRCAPIQuant
   Quant.cpp
 
@@ -133,12 +16,3 @@ add_mlir_upstream_c_api_library(MLIRCAPIQuant
   MLIRCAPIIR
   MLIRQuantDialect
 )
-
-add_mlir_upstream_c_api_library(MLIRCAPIPDL
-  PDL.cpp
-
-  PARTIAL_SOURCES_INTENDED
-  LINK_LIBS PUBLIC
-  MLIRCAPIIR
-  MLIRPDLDialect
-)
diff --git a/mlir/lib/CAPI/RegisterEverything/CMakeLists.txt b/mlir/lib/CAPI/RegisterEverything/CMakeLists.txt
index 55fe49bcef7b..5ca87d22c26a 100644
--- a/mlir/lib/CAPI/RegisterEverything/CMakeLists.txt
+++ b/mlir/lib/CAPI/RegisterEverything/CMakeLists.txt
@@ -1,17 +1,17 @@
 # Dialect registration.
 get_property(dialect_libs GLOBAL PROPERTY MLIR_DIALECT_LIBS)
-get_property(translation_libs GLOBAL PROPERTY MLIR_TRANSLATION_LIBS)
-get_property(conversion_libs GLOBAL PROPERTY MLIR_CONVERSION_LIBS)
+#get_property(translation_libs GLOBAL PROPERTY MLIR_TRANSLATION_LIBS)
+#get_property(conversion_libs GLOBAL PROPERTY MLIR_CONVERSION_LIBS)
 add_mlir_upstream_c_api_library(MLIRCAPIRegisterEverything
   RegisterEverything.cpp
 
   LINK_LIBS PUBLIC
   ${dialect_libs}
-  ${translation_libs}
-  ${conversion_libs}
+  #${translation_libs}
+  #${conversion_libs}
 
-  MLIRBuiltinToLLVMIRTranslation
+  #MLIRBuiltinToLLVMIRTranslation
   MLIRCAPIIR
-  MLIRLLVMToLLVMIRTranslation
-  MLIRCAPITransforms
+  #MLIRLLVMToLLVMIRTranslation
+  #MLIRCAPITransforms
 )
diff --git a/mlir/lib/CAPI/RegisterEverything/RegisterEverything.cpp b/mlir/lib/CAPI/RegisterEverything/RegisterEverything.cpp
index e4a7516437cb..865e2de35fcc 100644
--- a/mlir/lib/CAPI/RegisterEverything/RegisterEverything.cpp
+++ b/mlir/lib/CAPI/RegisterEverything/RegisterEverything.cpp
@@ -11,17 +11,12 @@
 #include "mlir/CAPI/IR.h"
 #include "mlir/InitAllDialects.h"
 #include "mlir/InitAllPasses.h"
-#include "mlir/Target/LLVMIR/Dialect/Builtin/BuiltinToLLVMIRTranslation.h"
-#include "mlir/Target/LLVMIR/Dialect/LLVMIR/LLVMToLLVMIRTranslation.h"
 
 void mlirRegisterAllDialects(MlirDialectRegistry registry) {
   mlir::registerAllDialects(*unwrap(registry));
 }
 
 void mlirRegisterAllLLVMTranslations(MlirContext context) {
-  auto &ctx = *unwrap(context);
-  mlir::registerBuiltinDialectTranslation(ctx);
-  mlir::registerLLVMDialectTranslation(ctx);
 }
 
 void mlirRegisterAllPasses() { mlir::registerAllPasses(); }
diff --git a/mlir/lib/CMakeLists.txt b/mlir/lib/CMakeLists.txt
index c71664a3f006..3503d15c51b0 100644
--- a/mlir/lib/CMakeLists.txt
+++ b/mlir/lib/CMakeLists.txt
@@ -4,18 +4,18 @@ add_flag_if_supported("-Werror=global-constructors" WERROR_GLOBAL_CONSTRUCTOR)
 add_subdirectory(Analysis)
 add_subdirectory(AsmParser)
 add_subdirectory(Bytecode)
-add_subdirectory(Conversion)
+# add_subdirectory(Conversion)
 add_subdirectory(Debug)
 add_subdirectory(Dialect)
 add_subdirectory(IR)
 add_subdirectory(Interfaces)
 add_subdirectory(Parser)
 add_subdirectory(Pass)
-add_subdirectory(Reducer)
+# add_subdirectory(Reducer)
 add_subdirectory(Rewrite)
 add_subdirectory(Support)
 add_subdirectory(TableGen)
-add_subdirectory(Target)
+# add_subdirectory(Target)
 add_subdirectory(Tools)
 add_subdirectory(Transforms)
 add_subdirectory(ExecutionEngine)
diff --git a/mlir/lib/Dialect/CMakeLists.txt b/mlir/lib/Dialect/CMakeLists.txt
index 6f01ea7a1da1..9d1c7ff3b7e2 100644
--- a/mlir/lib/Dialect/CMakeLists.txt
+++ b/mlir/lib/Dialect/CMakeLists.txt
@@ -1,40 +1,10 @@
-add_subdirectory(Affine)
-add_subdirectory(AMDGPU)
-add_subdirectory(Arith)
-add_subdirectory(ArmNeon)
-add_subdirectory(ArmSVE)
-add_subdirectory(Async)
-add_subdirectory(AMX)
-add_subdirectory(Bufferization)
-add_subdirectory(Complex)
-add_subdirectory(ControlFlow)
-add_subdirectory(DLTI)
-add_subdirectory(EmitC)
 add_subdirectory(Func)
-add_subdirectory(GPU)
-add_subdirectory(Index)
 add_subdirectory(IRDL)
-add_subdirectory(Linalg)
-add_subdirectory(LLVMIR)
-add_subdirectory(Math)
-add_subdirectory(MemRef)
-add_subdirectory(MLProgram)
-add_subdirectory(NVGPU)
-add_subdirectory(OpenACC)
-add_subdirectory(OpenMP)
 add_subdirectory(PDL)
 add_subdirectory(PDLInterp)
 add_subdirectory(Quant)
-add_subdirectory(SCF)
-add_subdirectory(Shape)
-add_subdirectory(SparseTensor)
-add_subdirectory(SPIRV)
-add_subdirectory(Tensor)
 add_subdirectory(Tosa)
-add_subdirectory(Transform)
-add_subdirectory(Utils)
-add_subdirectory(Vector)
-add_subdirectory(X86Vector)
+
 
 set(LLVM_OPTIONAL_SOURCES
   Traits.cpp
diff --git a/mlir/lib/Dialect/Func/CMakeLists.txt b/mlir/lib/Dialect/Func/CMakeLists.txt
index 9f57627c321f..68ac6312e7a3 100644
--- a/mlir/lib/Dialect/Func/CMakeLists.txt
+++ b/mlir/lib/Dialect/Func/CMakeLists.txt
@@ -1,2 +1,2 @@
 add_subdirectory(IR)
-add_subdirectory(Transforms)
+# add_subdirectory(Transforms)
diff --git a/mlir/lib/Dialect/Func/IR/CMakeLists.txt b/mlir/lib/Dialect/Func/IR/CMakeLists.txt
index 58fafe7d5f77..9884f28e41cf 100644
--- a/mlir/lib/Dialect/Func/IR/CMakeLists.txt
+++ b/mlir/lib/Dialect/Func/IR/CMakeLists.txt
@@ -9,8 +9,6 @@ add_mlir_dialect_library(MLIRFuncDialect
 
   LINK_LIBS PUBLIC
   MLIRCallInterfaces
-  MLIRControlFlowDialect
-  MLIRControlFlowInterfaces
   MLIRInferTypeOpInterface
   MLIRIR
   MLIRSideEffectInterfaces
diff --git a/mlir/lib/Dialect/Func/IR/FuncOps.cpp b/mlir/lib/Dialect/Func/IR/FuncOps.cpp
index 4fa2608785f9..a4389189ca3f 100644
--- a/mlir/lib/Dialect/Func/IR/FuncOps.cpp
+++ b/mlir/lib/Dialect/Func/IR/FuncOps.cpp
@@ -7,8 +7,6 @@
 //===----------------------------------------------------------------------===//
 
 #include "mlir/Dialect/Func/IR/FuncOps.h"
-
-#include "mlir/Dialect/ControlFlow/IR/ControlFlowOps.h"
 #include "mlir/IR/Builders.h"
 #include "mlir/IR/BuiltinOps.h"
 #include "mlir/IR/BuiltinTypes.h"
@@ -69,14 +67,7 @@ struct FuncInlinerInterface : public DialectInlinerInterface {
   /// as necessary.
   void handleTerminator(Operation *op, Block *newDest) const final {
     // Only return needs to be handled here.
-    auto returnOp = dyn_cast<ReturnOp>(op);
-    if (!returnOp)
       return;
-
-    // Replace the return with a branch to the dest.
-    OpBuilder builder(op);
-    builder.create<cf::BranchOp>(op->getLoc(), newDest, returnOp.getOperands());
-    op->erase();
   }
 
   /// Handle the given inlined terminator by replacing it with a new operation
diff --git a/mlir/lib/Dialect/Tosa/CMakeLists.txt b/mlir/lib/Dialect/Tosa/CMakeLists.txt
index b36e4a1cabb4..3ee7ffc22eaf 100644
--- a/mlir/lib/Dialect/Tosa/CMakeLists.txt
+++ b/mlir/lib/Dialect/Tosa/CMakeLists.txt
@@ -16,13 +16,10 @@ add_mlir_dialect_library(MLIRTosaDialect
   MLIRIR
   MLIRDialect
   MLIRCallInterfaces
-  MLIRControlFlowInterfaces
   MLIRQuantDialect
   MLIRQuantUtils
   MLIRSideEffectInterfaces
-  MLIRTensorDialect
-  MLIRVectorInterfaces
   MLIRViewLikeInterface
   )
 
-add_subdirectory(Transforms)
+# add_subdirectory(Transforms)
diff --git a/mlir/lib/Dialect/Tosa/IR/TosaCanonicalizations.cpp b/mlir/lib/Dialect/Tosa/IR/TosaCanonicalizations.cpp
index d5263a3ff056..8817524c36c4 100644
--- a/mlir/lib/Dialect/Tosa/IR/TosaCanonicalizations.cpp
+++ b/mlir/lib/Dialect/Tosa/IR/TosaCanonicalizations.cpp
@@ -12,7 +12,6 @@
 //===----------------------------------------------------------------------===//
 
 #include "mlir/Dialect/Quant/QuantOps.h"
-#include "mlir/Dialect/Tensor/IR/Tensor.h"
 #include "mlir/Dialect/Tosa/IR/TosaOps.h"
 #include "mlir/Dialect/Tosa/Utils/ConversionUtils.h"
 #include "mlir/Dialect/Tosa/Utils/QuantUtils.h"
@@ -42,18 +41,7 @@ struct ConcatOptimization : public OpRewritePattern<tosa::ConcatOp> {
 
   LogicalResult matchAndRewrite(tosa::ConcatOp op,
                                 PatternRewriter &rewriter) const override {
-    if (op.getInput1().size() != 1)
-      return failure();
-    if (op.getInput1().front().getType() != op.getType()) {
-      rewriter
-          .replaceOpWithNewOp<tensor::CastOp>(op, op.getType(),
-                                              op.getInput1().front())
-          .getResult();
-      return success();
-    }
-
-    rewriter.replaceOp(op, op.getInput1().front());
-    return success();
+    return failure();
   }
 };
 
@@ -135,44 +123,7 @@ struct ConsolidateTransposeOptimization
 
   LogicalResult matchAndRewrite(tosa::TransposeOp transposeOp,
                                 PatternRewriter &rewriter) const override {
-    // Input is also TransposeOp - transpose(transpose(A)).
-    auto innerTranspose =
-        transposeOp.getInput1().getDefiningOp<tosa::TransposeOp>();
-    if (!innerTranspose)
-      return rewriter.notifyMatchFailure(transposeOp,
-                                         "input must be transpose operation");
-
-    SmallVector<int64_t> transposePerms, innerTransposePerms;
-    if (transposeOp.getConstantPerms(transposePerms).failed())
-      return rewriter.notifyMatchFailure(transposeOp,
-                                         "transpose perms must be constant");
-    if (innerTranspose.getConstantPerms(innerTransposePerms).failed())
-      return rewriter.notifyMatchFailure(
-          transposeOp, "inner transpose perms must be constant");
-    if (transposePerms.size() != innerTransposePerms.size())
-      return rewriter.notifyMatchFailure(
-          transposeOp,
-          "transpose and inner transpose perms sizes must be equal");
-    if (transposePerms.empty())
-      return rewriter.notifyMatchFailure(
-          transposeOp, "transpose perms sizes must be positive");
-
-    // Consolidate transposes into one transpose.
-    SmallVector<int32_t> perms(transposePerms.size());
-    for (int i = 0, s = transposePerms.size(); i < s; ++i)
-      perms[i] = innerTransposePerms[transposePerms[i]];
-
-    auto permsTy =
-        RankedTensorType::get(transposePerms.size(), rewriter.getI32Type());
-    auto permsAttr = DenseIntElementsAttr::get(permsTy, perms);
-    Value permsValue =
-        rewriter.create<arith::ConstantOp>(transposeOp.getLoc(), permsAttr);
-
-    rewriter.replaceOpWithNewOp<tosa::TransposeOp>(
-        transposeOp, transposeOp.getResult().getType(),
-        innerTranspose.getInput1(), permsValue);
-
-    return success();
+    return failure();
   }
 };
 
diff --git a/mlir/lib/Dialect/Tosa/IR/TosaOps.cpp b/mlir/lib/Dialect/Tosa/IR/TosaOps.cpp
index 1b063e75eb93..5ecba23fdff0 100644
--- a/mlir/lib/Dialect/Tosa/IR/TosaOps.cpp
+++ b/mlir/lib/Dialect/Tosa/IR/TosaOps.cpp
@@ -14,7 +14,6 @@
 
 #include "mlir/Dialect/Tosa/IR/TosaOps.h"
 #include "mlir/Dialect/Quant/QuantOps.h"
-#include "mlir/Dialect/Tensor/IR/Tensor.h"
 #include "mlir/Dialect/Tosa/Utils/QuantUtils.h"
 #include "mlir/Dialect/Tosa/Utils/ShapeUtils.h"
 #include "mlir/IR/BuiltinTypes.h"
diff --git a/mlir/lib/IR/Verifier.cpp b/mlir/lib/IR/Verifier.cpp
index 68e498d57324..e9ff955a7270 100644
--- a/mlir/lib/IR/Verifier.cpp
+++ b/mlir/lib/IR/Verifier.cpp
@@ -156,10 +156,10 @@ LogicalResult OperationVerifier::verifyBlock(
   if (mayBeValidWithoutTerminator(&block))
     return success();
 
-  Operation &terminator = block.back();
-  if (!terminator.mightHaveTrait<OpTrait::IsTerminator>())
-    return block.back().emitError("block with no terminator, has ")
-           << terminator;
+  // Operation &terminator = block.back();
+  // if (!terminator.mightHaveTrait<OpTrait::IsTerminator>())
+  //   return block.back().emitError("block with no terminator, has ")
+  //          << terminator;
 
   return success();
 }
diff --git a/mlir/lib/Rewrite/CMakeLists.txt b/mlir/lib/Rewrite/CMakeLists.txt
index e0395be6cd6f..bd3a0c400a4e 100644
--- a/mlir/lib/Rewrite/CMakeLists.txt
+++ b/mlir/lib/Rewrite/CMakeLists.txt
@@ -13,6 +13,6 @@ add_mlir_library(MLIRRewrite
   MLIRIR
   MLIRPDLDialect
   MLIRPDLInterpDialect
-  MLIRPDLToPDLInterp
+  MLIRAnalysis
   MLIRSideEffectInterfaces
   )
diff --git a/mlir/lib/Rewrite/FrozenRewritePatternSet.cpp b/mlir/lib/Rewrite/FrozenRewritePatternSet.cpp
index 43840d1e8cec..1fc71ddbce9d 100644
--- a/mlir/lib/Rewrite/FrozenRewritePatternSet.cpp
+++ b/mlir/lib/Rewrite/FrozenRewritePatternSet.cpp
@@ -8,7 +8,6 @@
 
 #include "mlir/Rewrite/FrozenRewritePatternSet.h"
 #include "ByteCode.h"
-#include "mlir/Conversion/PDLToPDLInterp/PDLToPDLInterp.h"
 #include "mlir/Dialect/PDL/IR/PDLOps.h"
 #include "mlir/Interfaces/SideEffectInterfaces.h"
 #include "mlir/Pass/Pass.h"
@@ -40,9 +39,9 @@ convertPDLToPDLInterp(ModuleOp pdlModule,
   // mode.
   pdlPipeline.enableVerifier(false);
 #endif
-  pdlPipeline.addPass(createPDLToPDLInterpPass(configMap));
-  if (failed(pdlPipeline.run(pdlModule)))
-    return failure();
+  // pdlPipeline.addPass(createPDLToPDLInterpPass(configMap));
+  // if (failed(pdlPipeline.run(pdlModule)))
+  //   return failure();
 
   // Simplify again after running the lowering pipeline.
   pdlModule.getBody()->walk(simplifyFn);
diff --git a/mlir/lib/Tools/CMakeLists.txt b/mlir/lib/Tools/CMakeLists.txt
index 6175a1ce5f8d..fc1c16d0399d 100644
--- a/mlir/lib/Tools/CMakeLists.txt
+++ b/mlir/lib/Tools/CMakeLists.txt
@@ -1,10 +1,3 @@
-add_subdirectory(lsp-server-support)
-add_subdirectory(mlir-lsp-server)
 add_subdirectory(mlir-opt)
-add_subdirectory(mlir-pdll-lsp-server)
-add_subdirectory(mlir-reduce)
 add_subdirectory(mlir-tblgen)
-add_subdirectory(mlir-translate)
-add_subdirectory(PDLL)
 add_subdirectory(Plugins)
-add_subdirectory(tblgen-lsp-server)
diff --git a/mlir/python/CMakeLists.txt b/mlir/python/CMakeLists.txt
index 0a4c2f803641..338d96a4c201 100644
--- a/mlir/python/CMakeLists.txt
+++ b/mlir/python/CMakeLists.txt
@@ -46,21 +46,21 @@ declare_mlir_python_sources(MLIRPythonCAPI.HeaderSources
 # Dialect bindings
 ################################################################################
 
-declare_mlir_dialect_python_bindings(
-  ADD_TO_PARENT MLIRPythonSources.Dialects
-  ROOT_DIR "${CMAKE_CURRENT_SOURCE_DIR}/mlir"
-  TD_FILE dialects/AsyncOps.td
-  SOURCES_GLOB dialects/async_dialect/*.py
-  DIALECT_NAME async_dialect)
-
-declare_mlir_dialect_python_bindings(
-  ADD_TO_PARENT MLIRPythonSources.Dialects
-  ROOT_DIR "${CMAKE_CURRENT_SOURCE_DIR}/mlir"
-  TD_FILE dialects/BufferizationOps.td
-  SOURCES
-    dialects/bufferization.py
-    dialects/_bufferization_ops_ext.py
-  DIALECT_NAME bufferization)
+# declare_mlir_dialect_python_bindings(
+#   ADD_TO_PARENT MLIRPythonSources.Dialects
+#   ROOT_DIR "${CMAKE_CURRENT_SOURCE_DIR}/mlir"
+#   TD_FILE dialects/AsyncOps.td
+#   SOURCES_GLOB dialects/async_dialect/*.py
+#   DIALECT_NAME async_dialect)
+#
+# declare_mlir_dialect_python_bindings(
+#   ADD_TO_PARENT MLIRPythonSources.Dialects
+#   ROOT_DIR "${CMAKE_CURRENT_SOURCE_DIR}/mlir"
+#   TD_FILE dialects/BufferizationOps.td
+#   SOURCES
+#     dialects/bufferization.py
+#     dialects/_bufferization_ops_ext.py
+#   DIALECT_NAME bufferization)
 
 declare_mlir_dialect_python_bindings(
   ADD_TO_PARENT MLIRPythonSources.Dialects
@@ -71,21 +71,21 @@ declare_mlir_dialect_python_bindings(
     dialects/_builtin_ops_ext.py
   DIALECT_NAME builtin)
 
-declare_mlir_dialect_python_bindings(
-  ADD_TO_PARENT MLIRPythonSources.Dialects
-  ROOT_DIR "${CMAKE_CURRENT_SOURCE_DIR}/mlir"
-  TD_FILE dialects/ComplexOps.td
-  SOURCES
-    dialects/complex.py
-  DIALECT_NAME complex)
-
-declare_mlir_dialect_python_bindings(
-  ADD_TO_PARENT MLIRPythonSources.Dialects
-  ROOT_DIR "${CMAKE_CURRENT_SOURCE_DIR}/mlir"
-  TD_FILE dialects/ControlFlowOps.td
-  SOURCES
-    dialects/cf.py
-  DIALECT_NAME cf)
+# declare_mlir_dialect_python_bindings(
+#   ADD_TO_PARENT MLIRPythonSources.Dialects
+#   ROOT_DIR "${CMAKE_CURRENT_SOURCE_DIR}/mlir"
+#   TD_FILE dialects/ComplexOps.td
+#   SOURCES
+#     dialects/complex.py
+#   DIALECT_NAME complex)
+
+# declare_mlir_dialect_python_bindings(
+#   ADD_TO_PARENT MLIRPythonSources.Dialects
+#   ROOT_DIR "${CMAKE_CURRENT_SOURCE_DIR}/mlir"
+#   TD_FILE dialects/ControlFlowOps.td
+#   SOURCES
+#     dialects/cf.py
+#   DIALECT_NAME cf)
 
 declare_mlir_dialect_python_bindings(
   ADD_TO_PARENT MLIRPythonSources.Dialects
@@ -96,87 +96,87 @@ declare_mlir_dialect_python_bindings(
     dialects/_func_ops_ext.py
   DIALECT_NAME func)
 
-declare_mlir_dialect_python_bindings(
-  ADD_TO_PARENT MLIRPythonSources.Dialects
-  ROOT_DIR "${CMAKE_CURRENT_SOURCE_DIR}/mlir"
-  TD_FILE dialects/GPUOps.td
-  SOURCES_GLOB dialects/gpu/*.py
-  DIALECT_NAME gpu)
-
-declare_mlir_dialect_python_bindings(
-  ADD_TO_PARENT MLIRPythonSources.Dialects
-  ROOT_DIR "${CMAKE_CURRENT_SOURCE_DIR}/mlir"
-  TD_FILE dialects/LinalgOps.td
-  SOURCES
-    dialects/_linalg_ops_ext.py
-  SOURCES_GLOB
-    dialects/linalg/*.py
-  DIALECT_NAME linalg
-  DEPENDS LinalgOdsGen)
-
-declare_mlir_dialect_python_bindings(
-  ADD_TO_PARENT MLIRPythonSources.Dialects
-  ROOT_DIR "${CMAKE_CURRENT_SOURCE_DIR}/mlir"
-  TD_FILE dialects/TransformOps.td
-  SOURCES
-    dialects/_transform_ops_ext.py
-    dialects/transform/__init__.py
-    _mlir_libs/_mlir/dialects/transform/__init__.pyi
-  DIALECT_NAME transform)
-
-declare_mlir_dialect_extension_python_bindings(
-  ADD_TO_PARENT MLIRPythonSources.Dialects
-  ROOT_DIR "${CMAKE_CURRENT_SOURCE_DIR}/mlir"
-  TD_FILE dialects/SCFLoopTransformOps.td
-  SOURCES
-    dialects/_loop_transform_ops_ext.py
-    dialects/transform/loop.py
-  DIALECT_NAME transform
-  EXTENSION_NAME loop_transform)
-
-declare_mlir_dialect_extension_python_bindings(
-  ADD_TO_PARENT MLIRPythonSources.Dialects
-  ROOT_DIR "${CMAKE_CURRENT_SOURCE_DIR}/mlir"
-  TD_FILE dialects/LinalgStructuredTransformOps.td
-  SOURCES
-    dialects/_structured_transform_ops_ext.py
-    dialects/transform/structured.py
-  DIALECT_NAME transform
-  EXTENSION_NAME structured_transform)
-
-declare_mlir_dialect_python_bindings(
-  ADD_TO_PARENT MLIRPythonSources.Dialects
-  ROOT_DIR "${CMAKE_CURRENT_SOURCE_DIR}/mlir"
-  TD_FILE dialects/MathOps.td
-  SOURCES dialects/math.py
-  DIALECT_NAME math)
-
-declare_mlir_dialect_python_bindings(
-  ADD_TO_PARENT MLIRPythonSources.Dialects
-  ROOT_DIR "${CMAKE_CURRENT_SOURCE_DIR}/mlir"
-  TD_FILE dialects/ArithOps.td
-  SOURCES
-    dialects/arith.py
-    dialects/_arith_ops_ext.py
-  DIALECT_NAME arith)
-
-declare_mlir_dialect_python_bindings(
-  ADD_TO_PARENT MLIRPythonSources.Dialects
-  ROOT_DIR "${CMAKE_CURRENT_SOURCE_DIR}/mlir"
-  TD_FILE dialects/MemRefOps.td
-  SOURCES
-    dialects/memref.py
-    dialects/_memref_ops_ext.py
-  DIALECT_NAME memref)
-
-declare_mlir_dialect_python_bindings(
-  ADD_TO_PARENT MLIRPythonSources.Dialects
-  ROOT_DIR "${CMAKE_CURRENT_SOURCE_DIR}/mlir"
-  TD_FILE dialects/MLProgramOps.td
-  SOURCES
-    dialects/ml_program.py
-    dialects/_ml_program_ops_ext.py
-  DIALECT_NAME ml_program)
+# declare_mlir_dialect_python_bindings(
+#   ADD_TO_PARENT MLIRPythonSources.Dialects
+#   ROOT_DIR "${CMAKE_CURRENT_SOURCE_DIR}/mlir"
+#   TD_FILE dialects/GPUOps.td
+#   SOURCES_GLOB dialects/gpu/*.py
+#   DIALECT_NAME gpu)
+
+# declare_mlir_dialect_python_bindings(
+#   ADD_TO_PARENT MLIRPythonSources.Dialects
+#   ROOT_DIR "${CMAKE_CURRENT_SOURCE_DIR}/mlir"
+#   TD_FILE dialects/LinalgOps.td
+#   SOURCES
+#     dialects/_linalg_ops_ext.py
+#   SOURCES_GLOB
+#     dialects/linalg/*.py
+#   DIALECT_NAME linalg
+#   DEPENDS LinalgOdsGen)
+
+# declare_mlir_dialect_python_bindings(
+#   ADD_TO_PARENT MLIRPythonSources.Dialects
+#   ROOT_DIR "${CMAKE_CURRENT_SOURCE_DIR}/mlir"
+#   TD_FILE dialects/TransformOps.td
+#   SOURCES
+#     dialects/_transform_ops_ext.py
+#     dialects/transform/__init__.py
+#     _mlir_libs/_mlir/dialects/transform/__init__.pyi
+#   DIALECT_NAME transform)
+
+# declare_mlir_dialect_extension_python_bindings(
+#   ADD_TO_PARENT MLIRPythonSources.Dialects
+#   ROOT_DIR "${CMAKE_CURRENT_SOURCE_DIR}/mlir"
+#   TD_FILE dialects/SCFLoopTransformOps.td
+#   SOURCES
+#     dialects/_loop_transform_ops_ext.py
+#     dialects/transform/loop.py
+#   DIALECT_NAME transform
+#   EXTENSION_NAME loop_transform)
+
+# declare_mlir_dialect_extension_python_bindings(
+#   ADD_TO_PARENT MLIRPythonSources.Dialects
+#   ROOT_DIR "${CMAKE_CURRENT_SOURCE_DIR}/mlir"
+#   TD_FILE dialects/LinalgStructuredTransformOps.td
+#   SOURCES
+#     dialects/_structured_transform_ops_ext.py
+#     dialects/transform/structured.py
+#   DIALECT_NAME transform
+#   EXTENSION_NAME structured_transform)
+
+# declare_mlir_dialect_python_bindings(
+#   ADD_TO_PARENT MLIRPythonSources.Dialects
+#   ROOT_DIR "${CMAKE_CURRENT_SOURCE_DIR}/mlir"
+#   TD_FILE dialects/MathOps.td
+#   SOURCES dialects/math.py
+#   DIALECT_NAME math)
+
+# declare_mlir_dialect_python_bindings(
+#   ADD_TO_PARENT MLIRPythonSources.Dialects
+#   ROOT_DIR "${CMAKE_CURRENT_SOURCE_DIR}/mlir"
+#   TD_FILE dialects/ArithOps.td
+#   SOURCES
+#     dialects/arith.py
+#     dialects/_arith_ops_ext.py
+#   DIALECT_NAME arith)
+
+# declare_mlir_dialect_python_bindings(
+#   ADD_TO_PARENT MLIRPythonSources.Dialects
+#   ROOT_DIR "${CMAKE_CURRENT_SOURCE_DIR}/mlir"
+#   TD_FILE dialects/MemRefOps.td
+#   SOURCES
+#     dialects/memref.py
+#     dialects/_memref_ops_ext.py
+#   DIALECT_NAME memref)
+
+# declare_mlir_dialect_python_bindings(
+#   ADD_TO_PARENT MLIRPythonSources.Dialects
+#   ROOT_DIR "${CMAKE_CURRENT_SOURCE_DIR}/mlir"
+#   TD_FILE dialects/MLProgramOps.td
+#   SOURCES
+#     dialects/ml_program.py
+#     dialects/_ml_program_ops_ext.py
+#   DIALECT_NAME ml_program)
 
 declare_mlir_python_sources(
   MLIRPythonSources.Dialects.quant
@@ -186,61 +186,61 @@ declare_mlir_python_sources(
     dialects/quant.py
     _mlir_libs/_mlir/dialects/quant.pyi)
 
-declare_mlir_dialect_python_bindings(
-  ADD_TO_PARENT MLIRPythonSources.Dialects
-  ROOT_DIR "${CMAKE_CURRENT_SOURCE_DIR}/mlir"
-  TD_FILE dialects/PDLOps.td
-  SOURCES
-    dialects/pdl.py
-    dialects/_pdl_ops_ext.py
-    _mlir_libs/_mlir/dialects/pdl.pyi
-  DIALECT_NAME pdl)
-
-declare_mlir_dialect_python_bindings(
-  ADD_TO_PARENT MLIRPythonSources.Dialects
-  ROOT_DIR "${CMAKE_CURRENT_SOURCE_DIR}/mlir"
-  TD_FILE dialects/SCFOps.td
-  SOURCES
-    dialects/scf.py
-    dialects/_scf_ops_ext.py
-  DIALECT_NAME scf)
-
-declare_mlir_dialect_python_bindings(
-  ADD_TO_PARENT MLIRPythonSources.Dialects
-  ROOT_DIR "${CMAKE_CURRENT_SOURCE_DIR}/mlir"
-  TD_FILE dialects/ShapeOps.td
-  SOURCES dialects/shape.py
-  DIALECT_NAME shape)
-
-declare_mlir_dialect_python_bindings(
-  ADD_TO_PARENT MLIRPythonSources.Dialects
-  ROOT_DIR "${CMAKE_CURRENT_SOURCE_DIR}/mlir"
-  TD_FILE dialects/SparseTensorOps.td
-  SOURCES dialects/sparse_tensor.py
-  DIALECT_NAME sparse_tensor)
-
-declare_mlir_dialect_python_bindings(
-  ADD_TO_PARENT MLIRPythonSources.Dialects
-  ROOT_DIR "${CMAKE_CURRENT_SOURCE_DIR}/mlir"
-  TD_FILE dialects/TensorOps.td
-  SOURCES
-    dialects/tensor.py
-    dialects/_tensor_ops_ext.py
-  DIALECT_NAME tensor)
-
-declare_mlir_dialect_python_bindings(
-  ADD_TO_PARENT MLIRPythonSources.Dialects
-  ROOT_DIR "${CMAKE_CURRENT_SOURCE_DIR}/mlir"
-  TD_FILE dialects/TosaOps.td
-  SOURCES dialects/tosa.py
-  DIALECT_NAME tosa)
-
-declare_mlir_dialect_python_bindings(
-  ADD_TO_PARENT MLIRPythonSources.Dialects
-  ROOT_DIR "${CMAKE_CURRENT_SOURCE_DIR}/mlir"
-  TD_FILE dialects/VectorOps.td
-  SOURCES dialects/vector.py
-  DIALECT_NAME vector)
+# declare_mlir_dialect_python_bindings(
+#   ADD_TO_PARENT MLIRPythonSources.Dialects
+#   ROOT_DIR "${CMAKE_CURRENT_SOURCE_DIR}/mlir"
+#   TD_FILE dialects/PDLOps.td
+#   SOURCES
+#     dialects/pdl.py
+#     dialects/_pdl_ops_ext.py
+#     _mlir_libs/_mlir/dialects/pdl.pyi
+#   DIALECT_NAME pdl)
+
+# declare_mlir_dialect_python_bindings(
+#   ADD_TO_PARENT MLIRPythonSources.Dialects
+#   ROOT_DIR "${CMAKE_CURRENT_SOURCE_DIR}/mlir"
+#   TD_FILE dialects/SCFOps.td
+#   SOURCES
+#     dialects/scf.py
+#     dialects/_scf_ops_ext.py
+#   DIALECT_NAME scf)
+
+# declare_mlir_dialect_python_bindings(
+#   ADD_TO_PARENT MLIRPythonSources.Dialects
+#   ROOT_DIR "${CMAKE_CURRENT_SOURCE_DIR}/mlir"
+#   TD_FILE dialects/ShapeOps.td
+#   SOURCES dialects/shape.py
+#   DIALECT_NAME shape)
+
+# declare_mlir_dialect_python_bindings(
+#   ADD_TO_PARENT MLIRPythonSources.Dialects
+#   ROOT_DIR "${CMAKE_CURRENT_SOURCE_DIR}/mlir"
+#   TD_FILE dialects/SparseTensorOps.td
+#   SOURCES dialects/sparse_tensor.py
+#   DIALECT_NAME sparse_tensor)
+
+# declare_mlir_dialect_python_bindings(
+#   ADD_TO_PARENT MLIRPythonSources.Dialects
+#   ROOT_DIR "${CMAKE_CURRENT_SOURCE_DIR}/mlir"
+#   TD_FILE dialects/TensorOps.td
+#   SOURCES
+#     dialects/tensor.py
+#     dialects/_tensor_ops_ext.py
+#   DIALECT_NAME tensor)
+
+# declare_mlir_dialect_python_bindings(
+#   ADD_TO_PARENT MLIRPythonSources.Dialects
+#   ROOT_DIR "${CMAKE_CURRENT_SOURCE_DIR}/mlir"
+#   TD_FILE dialects/TosaOps.td
+#   SOURCES dialects/tosa.py
+#   DIALECT_NAME tosa)
+
+# declare_mlir_dialect_python_bindings(
+#   ADD_TO_PARENT MLIRPythonSources.Dialects
+#   ROOT_DIR "${CMAKE_CURRENT_SOURCE_DIR}/mlir"
+#   TD_FILE dialects/VectorOps.td
+#   SOURCES dialects/vector.py
+#   DIALECT_NAME vector)
 
 ################################################################################
 # Python extensions.
@@ -297,23 +297,21 @@ declare_mlir_python_extension(MLIRPythonExtension.RegisterEverything
   PRIVATE_LINK_LIBS
     LLVMSupport
   EMBED_CAPI_LINK_LIBS
-    MLIRCAPIConversion
-    MLIRCAPITransforms
     MLIRCAPIRegisterEverything
 )
 
-declare_mlir_python_extension(MLIRPythonExtension.Dialects.Linalg.Pybind
-  MODULE_NAME _mlirDialectsLinalg
-  ADD_TO_PARENT MLIRPythonSources.Dialects.linalg
-  ROOT_DIR "${PYTHON_SOURCE_DIR}"
-  SOURCES
-    DialectLinalg.cpp
-  PRIVATE_LINK_LIBS
-    LLVMSupport
-  EMBED_CAPI_LINK_LIBS
-    MLIRCAPIIR
-    MLIRCAPILinalg
-)
+# declare_mlir_python_extension(MLIRPythonExtension.Dialects.Linalg.Pybind
+#   MODULE_NAME _mlirDialectsLinalg
+#   ADD_TO_PARENT MLIRPythonSources.Dialects.linalg
+#   ROOT_DIR "${PYTHON_SOURCE_DIR}"
+#   SOURCES
+#     DialectLinalg.cpp
+#   PRIVATE_LINK_LIBS
+#     LLVMSupport
+#   EMBED_CAPI_LINK_LIBS
+#     MLIRCAPIIR
+#     MLIRCAPILinalg
+# )
 
 declare_mlir_python_extension(MLIRPythonExtension.Dialects.Quant.Pybind
   MODULE_NAME _mlirDialectsQuant
@@ -328,150 +326,150 @@ declare_mlir_python_extension(MLIRPythonExtension.Dialects.Quant.Pybind
     MLIRCAPIQuant
 )
 
-declare_mlir_python_extension(MLIRPythonExtension.Dialects.PDL.Pybind
-  MODULE_NAME _mlirDialectsPDL
-  ADD_TO_PARENT MLIRPythonSources.Dialects.pdl
-  ROOT_DIR "${PYTHON_SOURCE_DIR}"
-  SOURCES
-    DialectPDL.cpp
-  PRIVATE_LINK_LIBS
-    LLVMSupport
-  EMBED_CAPI_LINK_LIBS
-    MLIRCAPIIR
-    MLIRCAPIPDL
-)
-
-declare_mlir_python_extension(MLIRPythonExtension.Dialects.SparseTensor.Pybind
-  MODULE_NAME _mlirDialectsSparseTensor
-  ADD_TO_PARENT MLIRPythonSources.Dialects.sparse_tensor
-  ROOT_DIR "${PYTHON_SOURCE_DIR}"
-  SOURCES
-    DialectSparseTensor.cpp
-  PRIVATE_LINK_LIBS
-    LLVMSupport
-  EMBED_CAPI_LINK_LIBS
-    MLIRCAPIIR
-    MLIRCAPISparseTensor
-)
-
-declare_mlir_python_extension(MLIRPythonExtension.Dialects.Transform.Pybind
-  MODULE_NAME _mlirDialectsTransform
-  ADD_TO_PARENT MLIRPythonSources.Dialects.transform
-  ROOT_DIR "${PYTHON_SOURCE_DIR}"
-  SOURCES
-    DialectTransform.cpp
-  PRIVATE_LINK_LIBS
-    LLVMSupport
-  EMBED_CAPI_LINK_LIBS
-    MLIRCAPIIR
-    MLIRCAPITransformDialect
-)
-
-declare_mlir_python_extension(MLIRPythonExtension.AsyncDialectPasses
-  MODULE_NAME _mlirAsyncPasses
-  ADD_TO_PARENT MLIRPythonSources.Dialects.async_dialect
-  ROOT_DIR "${PYTHON_SOURCE_DIR}"
-  SOURCES
-    AsyncPasses.cpp
-  PRIVATE_LINK_LIBS
-    LLVMSupport
-  EMBED_CAPI_LINK_LIBS
-    MLIRCAPIAsync
-)
-
-if(MLIR_ENABLE_EXECUTION_ENGINE)
-  declare_mlir_python_extension(MLIRPythonExtension.ExecutionEngine
-    MODULE_NAME _mlirExecutionEngine
-    ADD_TO_PARENT MLIRPythonSources.ExecutionEngine
-    ROOT_DIR "${PYTHON_SOURCE_DIR}"
-    SOURCES
-      ExecutionEngineModule.cpp
-    PRIVATE_LINK_LIBS
-      LLVMSupport
-    EMBED_CAPI_LINK_LIBS
-      MLIRCAPIExecutionEngine
-  )
-endif()
-
-declare_mlir_python_extension(MLIRPythonExtension.GPUDialectPasses
-  MODULE_NAME _mlirGPUPasses
-  ADD_TO_PARENT MLIRPythonSources.Dialects.gpu
-  ROOT_DIR "${PYTHON_SOURCE_DIR}"
-  SOURCES
-    GPUPasses.cpp
-  PRIVATE_LINK_LIBS
-    LLVMSupport
-  EMBED_CAPI_LINK_LIBS
-    MLIRCAPIGPU
-)
-
-declare_mlir_python_extension(MLIRPythonExtension.LinalgPasses
-  MODULE_NAME _mlirLinalgPasses
-  ADD_TO_PARENT MLIRPythonSources.Dialects.linalg
-  ROOT_DIR "${PYTHON_SOURCE_DIR}"
-  SOURCES
-    LinalgPasses.cpp
-  PRIVATE_LINK_LIBS
-    LLVMSupport
-  EMBED_CAPI_LINK_LIBS
-    MLIRCAPILinalg
-)
-
-declare_mlir_python_extension(MLIRPythonExtension.SparseTensorDialectPasses
-  MODULE_NAME _mlirSparseTensorPasses
-  ADD_TO_PARENT MLIRPythonSources.Dialects.sparse_tensor
-  ROOT_DIR "${PYTHON_SOURCE_DIR}"
-  SOURCES
-    SparseTensorPasses.cpp
-  PRIVATE_LINK_LIBS
-    LLVMSupport
-  EMBED_CAPI_LINK_LIBS
-    MLIRCAPISparseTensor
-)
+# declare_mlir_python_extension(MLIRPythonExtension.Dialects.PDL.Pybind
+#   MODULE_NAME _mlirDialectsPDL
+#   ADD_TO_PARENT MLIRPythonSources.Dialects.pdl
+#   ROOT_DIR "${PYTHON_SOURCE_DIR}"
+#   SOURCES
+#     DialectPDL.cpp
+#   PRIVATE_LINK_LIBS
+#     LLVMSupport
+#   EMBED_CAPI_LINK_LIBS
+#     MLIRCAPIIR
+#     MLIRCAPIPDL
+# )
+
+# declare_mlir_python_extension(MLIRPythonExtension.Dialects.SparseTensor.Pybind
+#   MODULE_NAME _mlirDialectsSparseTensor
+#   ADD_TO_PARENT MLIRPythonSources.Dialects.sparse_tensor
+#   ROOT_DIR "${PYTHON_SOURCE_DIR}"
+#   SOURCES
+#     DialectSparseTensor.cpp
+#   PRIVATE_LINK_LIBS
+#     LLVMSupport
+#   EMBED_CAPI_LINK_LIBS
+#     MLIRCAPIIR
+#     MLIRCAPISparseTensor
+# )
+
+# declare_mlir_python_extension(MLIRPythonExtension.Dialects.Transform.Pybind
+#   MODULE_NAME _mlirDialectsTransform
+#   ADD_TO_PARENT MLIRPythonSources.Dialects.transform
+#   ROOT_DIR "${PYTHON_SOURCE_DIR}"
+#   SOURCES
+#     DialectTransform.cpp
+#   PRIVATE_LINK_LIBS
+#     LLVMSupport
+#   EMBED_CAPI_LINK_LIBS
+#     MLIRCAPIIR
+#     MLIRCAPITransformDialect
+# )
+
+# declare_mlir_python_extension(MLIRPythonExtension.AsyncDialectPasses
+#   MODULE_NAME _mlirAsyncPasses
+#   ADD_TO_PARENT MLIRPythonSources.Dialects.async_dialect
+#   ROOT_DIR "${PYTHON_SOURCE_DIR}"
+#   SOURCES
+#     AsyncPasses.cpp
+#   PRIVATE_LINK_LIBS
+#     LLVMSupport
+#   EMBED_CAPI_LINK_LIBS
+#     MLIRCAPIAsync
+# )
+
+# if(MLIR_ENABLE_EXECUTION_ENGINE)
+#   declare_mlir_python_extension(MLIRPythonExtension.ExecutionEngine
+#     MODULE_NAME _mlirExecutionEngine
+#     ADD_TO_PARENT MLIRPythonSources.ExecutionEngine
+#     ROOT_DIR "${PYTHON_SOURCE_DIR}"
+#     SOURCES
+#       ExecutionEngineModule.cpp
+#     PRIVATE_LINK_LIBS
+#       LLVMSupport
+#     EMBED_CAPI_LINK_LIBS
+#       MLIRCAPIExecutionEngine
+#   )
+# endif()
+
+# declare_mlir_python_extension(MLIRPythonExtension.GPUDialectPasses
+#   MODULE_NAME _mlirGPUPasses
+#   ADD_TO_PARENT MLIRPythonSources.Dialects.gpu
+#   ROOT_DIR "${PYTHON_SOURCE_DIR}"
+#   SOURCES
+#     GPUPasses.cpp
+#   PRIVATE_LINK_LIBS
+#     LLVMSupport
+#   EMBED_CAPI_LINK_LIBS
+#     MLIRCAPIGPU
+# )
+
+# declare_mlir_python_extension(MLIRPythonExtension.LinalgPasses
+#   MODULE_NAME _mlirLinalgPasses
+#   ADD_TO_PARENT MLIRPythonSources.Dialects.linalg
+#   ROOT_DIR "${PYTHON_SOURCE_DIR}"
+#   SOURCES
+#     LinalgPasses.cpp
+#   PRIVATE_LINK_LIBS
+#     LLVMSupport
+#   EMBED_CAPI_LINK_LIBS
+#     MLIRCAPILinalg
+# )
+
+# declare_mlir_python_extension(MLIRPythonExtension.SparseTensorDialectPasses
+#   MODULE_NAME _mlirSparseTensorPasses
+#   ADD_TO_PARENT MLIRPythonSources.Dialects.sparse_tensor
+#   ROOT_DIR "${PYTHON_SOURCE_DIR}"
+#   SOURCES
+#     SparseTensorPasses.cpp
+#   PRIVATE_LINK_LIBS
+#     LLVMSupport
+#   EMBED_CAPI_LINK_LIBS
+#     MLIRCAPISparseTensor
+# )
 
 # TODO: Figure out how to put this in the test tree.
 # This should not be included in the main Python extension. However,
 # putting it into MLIRPythonTestSources along with the dialect declaration
 # above confuses Python module loader when running under lit.
-set(_ADDL_TEST_SOURCES)
-if(MLIR_INCLUDE_TESTS)
-  set(_ADDL_TEST_SOURCES MLIRPythonTestSources)
-  declare_mlir_python_sources(MLIRPythonTestSources)
-  declare_mlir_python_sources(MLIRPythonTestSources.Dialects
-    ADD_TO_PARENT MLIRPythonTestSources)
-
-  # TODO: this uses a tablegen file from the test directory and should be
-  # decoupled from here.
-  declare_mlir_python_sources(
-    MLIRPythonTestSources.Dialects.PythonTest
-    ROOT_DIR "${CMAKE_CURRENT_SOURCE_DIR}/mlir"
-    ADD_TO_PARENT MLIRPythonTestSources.Dialects
-    SOURCES dialects/python_test.py)
-  set(LLVM_TARGET_DEFINITIONS
-    "${MLIR_MAIN_SRC_DIR}/test/python/python_test_ops.td")
-  mlir_tablegen(
-    "dialects/_python_test_ops_gen.py"
-    -gen-python-op-bindings
-    -bind-dialect=python_test)
-  add_public_tablegen_target(PythonTestDialectPyIncGen)
-  declare_mlir_python_sources(
-    MLIRPythonTestSources.Dialects.PythonTest.ops_gen
-    ROOT_DIR "${CMAKE_CURRENT_BINARY_DIR}"
-    ADD_TO_PARENT MLIRPythonTestSources.Dialects.PythonTest
-    SOURCES "dialects/_python_test_ops_gen.py")
-
-  declare_mlir_python_extension(MLIRPythonTestSources.PythonTestExtension
-    MODULE_NAME _mlirPythonTest
-    ADD_TO_PARENT MLIRPythonTestSources.Dialects
-    ROOT_DIR "${MLIR_SOURCE_DIR}/test/python/lib"
-    SOURCES
-      PythonTestModule.cpp
-    PRIVATE_LINK_LIBS
-      LLVMSupport
-    EMBED_CAPI_LINK_LIBS
-      MLIRCAPIPythonTestDialect
-  )
-endif()
+# set(_ADDL_TEST_SOURCES)
+# if(MLIR_INCLUDE_TESTS)
+#   set(_ADDL_TEST_SOURCES MLIRPythonTestSources)
+#   declare_mlir_python_sources(MLIRPythonTestSources)
+#   declare_mlir_python_sources(MLIRPythonTestSources.Dialects
+#     ADD_TO_PARENT MLIRPythonTestSources)
+
+#   # TODO: this uses a tablegen file from the test directory and should be
+#   # decoupled from here.
+#   declare_mlir_python_sources(
+#     MLIRPythonTestSources.Dialects.PythonTest
+#     ROOT_DIR "${CMAKE_CURRENT_SOURCE_DIR}/mlir"
+#     ADD_TO_PARENT MLIRPythonTestSources.Dialects
+#     SOURCES dialects/python_test.py)
+#   set(LLVM_TARGET_DEFINITIONS
+#     "${MLIR_MAIN_SRC_DIR}/test/python/python_test_ops.td")
+#   mlir_tablegen(
+#     "dialects/_python_test_ops_gen.py"
+#     -gen-python-op-bindings
+#     -bind-dialect=python_test)
+#   add_public_tablegen_target(PythonTestDialectPyIncGen)
+#   declare_mlir_python_sources(
+#     MLIRPythonTestSources.Dialects.PythonTest.ops_gen
+#     ROOT_DIR "${CMAKE_CURRENT_BINARY_DIR}"
+#     ADD_TO_PARENT MLIRPythonTestSources.Dialects.PythonTest
+#     SOURCES "dialects/_python_test_ops_gen.py")
+
+#   declare_mlir_python_extension(MLIRPythonTestSources.PythonTestExtension
+#     MODULE_NAME _mlirPythonTest
+#     ADD_TO_PARENT MLIRPythonTestSources.Dialects
+#     ROOT_DIR "${MLIR_SOURCE_DIR}/test/python/lib"
+#     SOURCES
+#       PythonTestModule.cpp
+#     PRIVATE_LINK_LIBS
+#       LLVMSupport
+#     EMBED_CAPI_LINK_LIBS
+#       MLIRCAPIPythonTestDialect
+#   )
+# endif()
 
 ################################################################################
 # Common CAPI dependency DSO.
@@ -496,7 +494,7 @@ add_mlir_python_common_capi_library(MLIRPythonCAPI
   DECLARED_SOURCES
     MLIRPythonSources
     MLIRPythonExtension.RegisterEverything
-    ${_ADDL_TEST_SOURCES}
+    #${_ADDL_TEST_SOURCES}
 )
 
 ################################################################################
@@ -510,7 +508,7 @@ add_mlir_python_modules(MLIRPythonModules
   DECLARED_SOURCES
     MLIRPythonSources
     MLIRPythonExtension.RegisterEverything
-    ${_ADDL_TEST_SOURCES}
+    #${_ADDL_TEST_SOURCES}
   COMMON_CAPI_LINK_LIBS
     MLIRPythonCAPI
 )
diff --git a/mlir/python/mlir/ir.py b/mlir/python/mlir/ir.py
index 714253426b02..1331923a5eff 100644
--- a/mlir/python/mlir/ir.py
+++ b/mlir/python/mlir/ir.py
@@ -40,7 +40,27 @@ def _i32Attr(x, context):
 def _i64Attr(x, context):
   return IntegerAttr.get(IntegerType.get_signless(64, context=context), x)
 
+@register_attribute_builder("SI32Attr")
+def _si32Attr(x, context):
+  return IntegerAttr.get(IntegerType.get_signed(32, context=context), x)
 
+@register_attribute_builder("F64Attr")
+def _f64Attr(x, context):
+  return FloatAttr.get_f64(x, context=context)
+
+@register_attribute_builder("F32Attr")
+def _f32Attr(x, context):
+  return FloatAttr.get_f32(x, context=context)
+
+@register_attribute_builder("F64ArrayAttr")
+def _f64ArrayAttr(x, context):
+  return ArrayAttr.get([FloatAttr.get_f64(v, context=context) for v in x])
+
+@register_attribute_builder("F32ArrayAttr")
+def _f32ArrayAttr(x, context):
+  return ArrayAttr.get([FloatAttr.get_f32(v, context=context) for v in x])
+
+@register_attribute_builder("ReduceModeAttr")
 @register_attribute_builder("StrAttr")
 def _stringAttr(x, context):
   return StringAttr.get(x, context=context)
diff --git a/mlir/tools/CMakeLists.txt b/mlir/tools/CMakeLists.txt
index e9a1e4d62517..79ab4687c0cd 100644
--- a/mlir/tools/CMakeLists.txt
+++ b/mlir/tools/CMakeLists.txt
@@ -1,13 +1,13 @@
-add_subdirectory(mlir-lsp-server)
+# add_subdirectory(mlir-lsp-server)
 add_subdirectory(mlir-opt)
-add_subdirectory(mlir-parser-fuzzer)
-add_subdirectory(mlir-pdll-lsp-server)
-add_subdirectory(mlir-reduce)
-add_subdirectory(mlir-shlib)
-add_subdirectory(mlir-spirv-cpu-runner)
-add_subdirectory(mlir-translate)
-add_subdirectory(mlir-vulkan-runner)
-add_subdirectory(tblgen-lsp-server)
+# add_subdirectory(mlir-parser-fuzzer)
+# add_subdirectory(mlir-pdll-lsp-server)
+# add_subdirectory(mlir-reduce)
+# add_subdirectory(mlir-shlib)
+# add_subdirectory(mlir-spirv-cpu-runner)
+# add_subdirectory(mlir-translate)
+# add_subdirectory(mlir-vulkan-runner)
+# add_subdirectory(tblgen-lsp-server)
 
 # mlir-cpu-runner requires ExecutionEngine.
 if(MLIR_ENABLE_EXECUTION_ENGINE)
diff --git a/mlir/tools/mlir-opt/CMakeLists.txt b/mlir/tools/mlir-opt/CMakeLists.txt
index 2d021d58c49a..c99e47555f15 100644
--- a/mlir/tools/mlir-opt/CMakeLists.txt
+++ b/mlir/tools/mlir-opt/CMakeLists.txt
@@ -51,7 +51,6 @@ set(LIBS
   ${dialect_libs}
   ${conversion_libs}
   ${test_libs}
-  MLIRAffineAnalysis
   MLIRAnalysis
   MLIRDialect
   MLIROptLib
diff --git a/mlir/tools/mlir-opt/mlir-opt.cpp b/mlir/tools/mlir-opt/mlir-opt.cpp
index 13a525f0bcff..130819fe5477 100644
--- a/mlir/tools/mlir-opt/mlir-opt.cpp
+++ b/mlir/tools/mlir-opt/mlir-opt.cpp
@@ -26,7 +26,7 @@
 
 using namespace llvm;
 using namespace mlir;
-
+#ifdef MLIR_INCLUDE_TESTS
 // Defined in the test directory, no public header.
 namespace mlir {
 void registerConvertToTargetEnvPass();
@@ -140,7 +140,6 @@ void registerTestTransformDialectExtension(DialectRegistry &);
 void registerTestDynDialect(DialectRegistry &);
 } // namespace test
 
-#ifdef MLIR_INCLUDE_TESTS
 void registerTestPasses() {
   registerCloneTestPasses();
   registerConvertToTargetEnvPass();
-- 
2.25.1

